@q solids.web @>
    
@q * (0) Copyright and License.@>

@q This file is part of GNU 3DLDF, a package for three-dimensional drawing. @>
@q Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, @>
@q 2011, 2012, 2013, 2014 The Free Software Foundation @>

@q GNU 3DLDF is free software; you can redistribute it and/or modify @>
@q it under the terms of the GNU General Public License as published by @>
@q the Free Software Foundation; either version 3 of the License, or @>
@q (at your option) any later version. @>

@q GNU 3DLDF is distributed in the hope that it will be useful, @>
@q but WITHOUT ANY WARRANTY; without even the implied warranty of @>
@q MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the @>
@q GNU General Public License for more details. @>

@q You should have received a copy of the GNU General Public License @>
@q along with GNU 3DLDF; if not, write to the Free Software @>
@q Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA @>

@q GNU 3DLDF is a GNU package.  @>
@q It is part of the GNU Project of the  @>
@q Free Software Foundation @>
@q and is published under the GNU General Public License. @>
@q See the website http://www.gnu.org @>
@q for more information.   @>
@q GNU 3DLDF is available for downloading from @>
@q http://www.gnu.org/software/3dldf/LDF.html. @>

@q (``@@'' stands for a single at-sign in the following paragraph.) @>

@q Please send bug reports to Laurence.Finston@@gmx.de @>
@q The mailing list help-3dldf@@gnu.org is available for people to @>
@q ask other users for help.  @>
@q The mailing list info-3dldf@@gnu.org is for sending @>
@q announcements to users. To subscribe to these mailing lists, send an @>
@q email with ``subscribe <email-address>'' as the subject.  @>

@q The author can be contacted at: @>

@q Laurence D. Finston                 @> 
@q c/o Free Software Foundation, Inc.  @>
@q 51 Franklin St, Fifth Floor         @> 
@q Boston, MA  02110-1301              @>
@q USA                                 @>

@q Laurence.Finston@@gmx.de (@@ stands for a single ``at'' sign.)@>


@q * (0) Solid.@>
@** Solid\quad ({\tt solids\PERIOD web}).\hfil

@q * Include files. @>
@ Include files.

@<Include files@>=

#define _GNU_SOURCE

#include <stdlib.h>
#include <stdio.h>   
#include <string.h>
#include <errno.h>
#include <math.h>
#include <float.h>  
#include <limits.h>

#include <string> 
#include <fstream>
#include <iomanip>
#include <ios>
#include <iostream>
#include <sstream>   

#include <iterator>
#include <valarray>   
#include <vector>   

#include <limits>     

#include <pthread.h>   

#if HAVE_CONFIG_H
#include "config.h"
#endif 

#include "glblcnst.h++"
#include "glblvrbl.h++"
#include "utility.h++"
#include "transfor.h++"
#include "shapes.h++"
#include "points.h++"
#include "paths.h++"

@q * (1) class Solid declaration.  @>
@ |class Solid| declaration.  
\initials{LDF 2014.06.24.}

@<Declare |class Solid|@>=

template <class C, unsigned int T = 0>
class Solid : public Shape<C, T>
{

  vector<Path<C, T> > path_vector; 

  public:

  @<Declare |Solid| functions@>@;
};

@q ** (2) Solid constructors.  @>

@q *** (3) Default constructor.  @>

@ Default constructor.  

@q **** (4) Declaration @>

@<Declare |Solid| functions@>=

Solid(void);

@q **** (4) Definition  @>
@
@<|Solid| constructor definitions@>=

template <class C, unsigned int T>
Solid<C,T>::Solid(void)
{

   return;


}  /* End of default |Solid| constructor  */

@q ** (2) Show (|show|).  @>
@ Show (|show|).

\LOG
\initials{LDF 2014.06.24.}
Added this function.
\ENDLOG

@q *** (3) Declaration @>

@<Declare |Solid| functions@>=

void
show(string s = "Solid:");

@q *** (3) Definition  @>
@
@<|Solid::show| definition@>=

template <class C, unsigned int T>
void
Solid<C,T>::show(string s)
{

   lock_cerr_mutex(); 

   cerr << s << endl
        << "path_vector.size():  " << path_vector.size()
        << endl;

   if (path_vector.size() > 0)
   {
      cerr << "path_vector:"
           << endl;
   }

   for (typename vector<Path<C, T> >::iterator iter = path_vector.begin();
        iter != path_vector.end();
        ++iter)
   {
       iter->show();
   }

   unlock_cerr_mutex(); 

   return;


}  /* End of |Solid::show| definition  */


@q * (1) Putting Solid together.@>
@ Putting {\bf Solid} together.

@ This is what's compiled.
@c
@<Include files@>@;
@<Declare |class Solid|@>@;
@<|Solid| constructor definitions@>@;@/
@<|Solid::show| definition@>@;@/


@ This is what's written to \filename{solids.h}. 
@(solids.h@>=
@<Declare |class Solid|@>@;
@<|Solid| constructor definitions@>@;@/
@<|Solid::show| definition@>@;@/



@q * Emacs-Lisp code for use in indirect buffers when using the          @>
@q   GNU Emacs editor.  The local variable list is not evaluated when an @>
@q   indirect buffer is visited, so it's necessary to evaluate the       @>
@q   following s-expression in order to use the facilities normally      @>
@q   accessed via the local variables list.                              @>
@q   \initials{LDF 2004.02.12}.                                          @>
@q   (progn (cweb-mode) (outline-minor-mode t) (setq fill-column 70))    @>




@q * Local variables for Emacs.@>
@q Local Variables: @>
@q mode:CWEB @>
@q eval:(display-time) @>
@q run-gxx-on-file:"main.c" @>
@q run-cweb-on-file:"main.web" @>
@q run-cweave-on-file:"3DLDF.web" @>
@q run-mp-on-file:"persp.mp" @>
@q makefile:"makefile" @>
@q executable-name:"pp" @>
@q use-g++:t @>
@q eval:(read-abbrev-file) @>
@q indent-tabs-mode:nil @>
@q eval:(outline-minor-mode) @>
@q End: @>
