  

  int this_option_optind = optind ? optind : 1;  

@q *** (3) Loop for handling options.@>
@*2 Loop for handling options.

@<|process_command_line_options| definition@>=

  while (1) {


    option_ctr = getopt_long_only (argc, argv, "hv",
                          long_options, &option_index);
#if 0 
    if (DEBUG)
      {
        cerr << "option_ctr == " << option_ctr << endl;
        cerr << "option_index == " << option_index << endl;
        if (optarg)
          cerr << "optarg == " << optarg << endl;
      }
#endif     

    if (option_ctr == -1)
      {
        if (DEBUG)
          cerr << "No more option arguments." << endl << endl << flush;
        break;
      }

    if (option_ctr == 0)
      {
        if (DEBUG)
          {
            cerr << "option " << long_options[option_index].name;
            if (optarg)
              cerr << " with arg " << optarg;
            cerr << endl;
          }

@q **** (4) bison-trace.@>
@ bison-trace.

\LOG
\initials{LDF 2004.11.01.}
Added this section.
\ENDLOG

@<|process_command_line_options| definition@>=

        if (option_index == BISON_TRACE_INDEX)
          {
             bison_trace = true;

          } /* |if (option_index == BISON_TRACE_INDEX)|  */

@q **** (4) help.@>
@ help.

\LOG
\initials{LDF 2004.09.30.}
Added output for the ``quiet'' option.  
Now calling |cerr_mutex.lock| and |cerr_mutex.unlock|
to make this output thread-safe.

\initials{LDF 2004.11.01.}
Added text explaining the ``--bison-trace'' option.
Edited the output.
\ENDLOG 

@<|process_command_line_options| definition@>=

        else if (option_index == HELP_INDEX)
          {
            cerr_mutex.lock(); 
            cerr << "GNU 3DLDF Version " << VERSION_3DLDF << ". "
                 << COPYRIGHT_3DLDF << endl 
                 << endl
                 << "Valid options for GNU 3DLDF are:" << endl
                 << endl
                 << "--bison-trace:           Prints information generated by Bison "
                 << endl << "                         "
                 << "for tracing which parser rules are reduced "
                 << endl << "                         "
                 << "and the state of the Bison stack." << endl
                 << endl
                 << "--help:                  Prints this message and exits "
                 << "with return value 0." << endl
                 << endl
                 << "--multithread-input:     Enables the use of multiple "
                 << "threads for input."
                 << endl
                 << endl
                 << "--multithread-output:    Enables the use of multiple "
                 << "threads for output."
                 << endl
                 << endl
                 << "--multithread-include:   Enables the use of multiple "
                 << "threads for input" << endl 
                 << "                         files included in other input files."
                 << endl
                 << endl
                 << "--quiet:                 Suppresses some output to standard "
                 << "output"
                 << endl 
                 << "                         and standard error when `3dldf' is run." 
                 << endl << endl
                 << "--silent:                Suppresses almost all output "
                 << "to standard output" << endl
                 << "                         and standard error when "
                 << "`3dldf' is run."
                 << endl << endl
                 << "--verbose:               Causes status information to be "
                 << "printed to standard output" << endl 
                 << "                         when `3dldf' is run."
                 << endl << endl 
                 << "--version:               Prints the version number of "
                 << "GNU 3DLDF" << endl 
                 << "                         to standard output and exits with "
                 << "return value 0."
                 << endl << endl; 


#if DEBUG_COMPILE
            if (DEBUG)
              {
                  cerr << "Exiting with return value 0." << endl;
              }
#endif /* |DEBUG_COMPILE|  */@; 
 
            cerr_mutex.unlock(); 
            exit(0);

          } /* |if (option_index == HELP_INDEX)|  */




@q **** (4) multithread input.@>
@ multithread input.
@<|process_command_line_options| definition@>=

        else if (option_index == MULTITHREAD_INPUT_INDEX)
          {

#ifdef HAVE_PTHREAD_H  

#if DEBUG_COMPILE
            if (DEBUG) 
              cerr << "Setting `run_state_initial.multithread_input' "
                   << "to `true'." << endl;
#endif /* |DEBUG_COMPILE|  */@; 

            run_state_initial.multithread_input = true;

#else  /* |HAVE_PTHREAD_H| is undefined. */@; 


#if DEBUG_COMPILE
            if (DEBUG) 
              cerr << "`HAVE_PTHREAD_H' is undefined." << endl
                   << "Setting `run_state_initial.multithread_input' "
                   << "to `false'." << endl;
#endif /* |DEBUG_COMPILE|  */@; 

            run_state_initial.multithread_input = false;

#endif /* |HAVE_PTHREAD_H| is undefined. */@; 

          } /* |else if (option_index == MULTITHREAD_INPUT_INDEX)|  */


@q **** (4) multithread output.@>
@ multithread output.

@<|process_command_line_options| definition@>=

        else if (option_index == MULTITHREAD_OUTPUT_INDEX)
          {
#ifdef HAVE_PTHREAD_H  
#if DEBUG_COMPILE
              if (DEBUG) 
                cerr << "Setting `run_state_initial.multithread_output' "
                     << "to `true'." << endl;

#endif /* |DEBUG_COMPILE|  */@; 

            run_state_initial.multithread_output = true;

#else /* |HAVE_PTHREAD_H| is undefined. */@; 

#if DEBUG_COMPILE
              if (DEBUG) 
                cerr << "`HAVE_PTHREAD_H' is undefined." << endl
                     << "Setting `run_state_initial.multithread_output' "
                     << "to `false'." << endl;

              run_state_initial.multithread_output = false;

#endif /* |DEBUG_COMPILE|  */@; 

#endif /* |HAVE_PTHREAD_H| is undefined. */@; 

          } /* |else if (option_index == MULTITHREAD_OUTPUT_INDEX)|  */ 



@q **** (4) multithread include.@>
@ multithread include.

@<|process_command_line_options| definition@>=

        else if (option_index == MULTITHREAD_INCLUDE_INDEX)
          {

#ifdef HAVE_PTHREAD_H  

#if DEBUG_COMPILE
            if (DEBUG) 
              cerr << "Setting `run_state_initial.multithread_include' "
                   << "to `true'." << endl;
#endif /* |DEBUG_COMPILE|  */@; 

            run_state_initial.multithread_include = true;

#else  /* |HAVE_PTHREAD_H| is undefined. */@; 


#if DEBUG_COMPILE
            if (DEBUG) 
              cerr << "`HAVE_PTHREAD_H' is undefined." << endl
                   << "Setting `run_state_initial.multithread_include' "
                   << "to `false'." << endl;
#endif /* |DEBUG_COMPILE|  */@; 

            run_state_initial.multithread_include = false;

#endif /* |HAVE_PTHREAD_H| is undefined. */@; 

          } /* |else if (option_index == MULTITHREAD_INCLUDE_INDEX)|  */


@q **** (4) quiet.@>
@ quiet.

@<|process_command_line_options| definition@>=

        else if (option_index == QUIET_INDEX)
          {
            if (DEBUG) 
              cerr << "Setting QUIET_GLOBAL to true." << endl;
            QUIET_GLOBAL = true;
          }


@q **** (4) silent.@>
@ silent.

@<|process_command_line_options| definition@>=

        else if (option_index == SILENT_INDEX)
          {
            if (DEBUG) 
              cerr << "Setting SILENT_GLOBAL to true." << endl;
            SILENT_GLOBAL = true;
          }



@q **** (4) verbose.@>
@ verbose.
@<|process_command_line_options| definition@>=

        else if (option_index == VERBOSE_INDEX)
          {
            if (DEBUG) 
              cerr << "Setting VERBOSE_GLOBAL to true." << endl; 
            VERBOSE_GLOBAL = true;
          }

@q **** (4) version.@>
@ version.

\LOG
\initials{LDF 2007.07.03.}
Changed the text that's printed out when the executable is 
called using the ``\.{version}'' option.
\ENDLOG 

@<|process_command_line_options| definition@>=

        else if (option_index == VERSION_INDEX)
          {
            cerr << "GNU 3DLDF Version " << VERSION_3DLDF << "."
                 << endl 
                 << COPYRIGHT_3DLDF << endl
                 << "License GPLv3+: GNU GPL version 3 or later "
                 << "<http://gnu.org/licenses/gpl.html> "
                 << endl
                 << "This is free software: you are free to change and redistribute it."
                 << endl
                 << "There is NO WARRANTY, to the extent permitted by law."
                 << endl;

#if DEBUG_COMPILE
            if (DEBUG)
               {
                  cerr << "Exiting with return value 0." << endl << flush;
               }
#endif /* |DEBUG_COMPILE|  */@; 
  
            exit(0);
          }

@q **** (4) Invalid option_index value.@>
@ Invalid {\tt option\_index} value.

@<|process_command_line_options| definition@>=

        else 
          {
            cerr << "This can't happen! "
                 << "option_index has invalid value: "
                 << option_index << endl
                 << "Will try to continue." 
                 << endl << endl << flush;
          }
      }

@q **** (4) Ambiguous option.@>
@ Ambiguous option.

@<|process_command_line_options| definition@>=

    else if (option_ctr == '?')
      {
        cerr << "getopt_long() returned ambiguous match. Breaking."
             << endl << endl << flush;
        break;
      }

@q **** (4) Invalid option.@>
@ Invalid option.

@<|process_command_line_options| definition@>=

    else
      {
        cerr << "getopt_long() returned invalid option."
             << endl << flush;
      }

@q **** (4) End of while loop.@>
@ End of while loop.

@<|process_command_line_options| definition@>=

    if (DEBUG) 
      cerr << "*********************\n\n";

    } /* |while|  */
  

@q *** (3) Filename arguments.@>
@*2 Filename arguments.

@<|process_command_line_options| definition@>=
        
  if (optind < argc)
    {
#if 0 
      if (DEBUG)
        cerr << "non-option ARGV-elements: ";
#endif 
      unsigned short i = 0;      
      for (; optind < argc && i < MAX_FILE_ARGS; ++i, ++optind)
        {
       
#if DEBUG_COMPILE
          if (DEBUG)
            {
              cerr << "argv[" << optind << "] == " << argv[optind] << endl << flush;
              cerr << "strlen(argv[optind]) == " << strlen(argv[optind]) << endl
                   << flush;
            }
#endif


          if (strlen(argv[optind]) < MAX_FILENAME)
            {

#if 0 
#if DEBUG_COMPILE
              if (DEBUG)
                cerr << "It's less" << "\n" << flush;
#endif
#endif 
              strcpy(filename_array[i], argv[optind]);

              if (DEBUG)
                {
                  cerr << "filename_array[" << i << "] == " 
                       << filename_array[i] << endl << flush;
                }
            }
          else
            {
              cerr << "WARNING: In main():\n"
                   << "Filename argument from the command line is too long:\n"
                   << argv[optind] << endl << "Ignoring.\n\n" << flush;
              break;
            }
        } /* |for| */ 
         
     filename_array_ctr = i;
      if (DEBUG)
        {
          for(unsigned short j  = 0; j < i; ++j)
            cerr << "filename_array[" << j << "] == "
                 << filename_array[j] << endl << flush;
        } 

   
  } /* |if|  */
#if 0 
  if (DEBUG)
    {
      cerr << "Exiting. (Debugging command line option processing.)" 
           << endl << endl << flush;
      exit(0);
    }
#endif 
} /* End of group.  */
