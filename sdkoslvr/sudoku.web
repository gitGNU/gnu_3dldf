@q sudoku.web @>
@q Created by Laurence D. Finston (LDF) Wed Mar  5 12:18:33 CET 2014 @>

@q * Copyright and License.@>

@q This file is part of GNU 3DLDF, a package for three-dimensional drawing. @>
@q Copyright (C) 2014 The Free Software Foundation                          @>

@q GNU 3DLDF is free software; you can redistribute it and/or modify @>
@q it under the terms of the GNU General Public License as published by @>
@q the Free Software Foundation; either version 3 of the License, or @>
@q (at your option) any later version. @>

@q GNU 3DLDF is distributed in the hope that it will be useful, @>
@q but WITHOUT ANY WARRANTY; without even the implied warranty of @>
@q MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the @>
@q GNU General Public License for more details. @>

@q You should have received a copy of the GNU General Public License @>
@q along with GNU 3DLDF; if not, write to the Free Software @>
@q Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA @>

@q GNU 3DLDF is a GNU package.  @>
@q It is part of the GNU Project of the  @>
@q Free Software Foundation @>
@q and is published under the GNU General Public License. @>
@q See the website http://www.gnu.org @>
@q for more information.   @>
@q GNU 3DLDF is available for downloading from @>
@q http://www.gnu.org/software/3dldf/LDF.html. @>

@q (``@@'' stands for a single at-sign in the following paragraph.) @>

@q Please send bug reports to Laurence.Finston@@gmx.de @>
@q The mailing list help-3dldf@@gnu.org is available for people to @>
@q ask other users for help.  @>
@q The mailing list info-3dldf@@gnu.org is for sending @>
@q announcements to users. To subscribe to these mailing lists, send an @>
@q email with ``subscribe <email-address>'' as the subject.  @>

@q The author can be contacted at: @>

@q Laurence D. Finston @>
@q Kreuzbergring 41 @>
@q D-37075 Goettingen @>
@q Germany @>

@q Laurence.Finston@@gmx.de (@@ stands for a single ``at'' sign.)@>





@
@<Include files@>=

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <limits.h>
#include <errno.h>

#include <string>
#include <fstream>
#include <iostream>
#include <iomanip>
#include <sstream>
#include <bitset>

#include <fldtype.hxx>


@q * (1) @>

@
@<Global variable declarations@>=

Field_Type diagram[9][9];

@q * (1) @>
@
@<|main| definition@>=

int main(int argc, char *argv[])
{
@q ** (2) @>

  bool DEBUG = true; /* |false|  */

  Field_Type *curr_field = 0;

  int pass_limit = 100;

  int status = 0;

  diagram[0][2].set(2);
  diagram[0][3].set(9);
  diagram[0][6].set(1);
  diagram[0][8].set(7);

  diagram[1][1].set(9);

  diagram[2][0].set(1);
  diagram[2][1].set(4);
  diagram[2][6].set(6);

  diagram[3][1].set(3);
  diagram[3][4].set(4);
  diagram[3][7].set(7);

  diagram[4][3].set(2);
  diagram[4][5].set(8);

  diagram[5][0].set(7);
  diagram[5][2].set(6);
  diagram[5][7].set(8);

  diagram[6][1].set(5);
  diagram[6][3].set(7);
  diagram[6][4].set(2);
  diagram[6][8].set(4);

  diagram[7][0].set(9);
  diagram[7][3].set(6);

  diagram[8][3].set(4);
  diagram[8][4].set(3);
  diagram[8][5].set(9);

@q ** (2) @>
@
@<|main| definition@>=

  unsigned long int temp_val = 0UL;

  if (argc > 1 && argv[1] != 0 && strlen(argv[1]) > 0)
  {
       errno = 0;
       temp_val = strtoul(argv[1], 0, 10);

       if (temp_val == ULONG_MAX)
       {
           cerr << "ERROR!  `strtoul' failed, returning `ULONG_MAX':"
                << endl
                << strerror(errno)
                << endl 
                << "Not resetting `pass_limit'.  Will use default value == " 
                << pass_limit << "."
                << endl;

       }
       else if (pass_limit > INT_MAX)
       {
           cerr << "WARNING!  `strtoul' returned " << temp_val << " "
                << "(> `INT_MAX' == " << INT_MAX << ")"
                << endl
                << endl 
                << "Value out of range.  Not resetting `pass_limit'.  Will use default value == " 
                << pass_limit << "."
                << endl;

       }

#if DEBUG_COMPILE
       else if (DEBUG)
       {
           cerr << "Resetting `pass_limit' to " << temp_val << "." 
                << endl;

       }  /* |else if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 

      
  }  /* |if|  */

@q ** (2) @>


  for (int iter_ctr = 1;;++iter_ctr)
  {
@q *** (3) @>

#if DEBUG_COMPILE
     if (DEBUG)
     { 
         cerr << "Pass " << iter_ctr 
              << endl
              << "`iter_ctr' == " << iter_ctr 
              << endl
              << "Field_Type::set_field_ctr == " << Field_Type::set_field_ctr
              << endl;
     }
#endif

@q *** (3) @>

      for (int i = 0; i < 9; ++i)
      {
@q **** (4) @>

          for (int j = 0; j < 9; ++j)
          {
@q ***** (5) @>

#if DEBUG_COMPILE
      	      if (DEBUG)
      	      {
      	        cerr << "i == " << setw(2) << i << ", j == " << setw(2) << j 
                     << endl
                     << "Field_Type::set_field_ctr == " << Field_Type::set_field_ctr
                     << endl;

              }
#endif

@q **** (4) @>

               curr_field = &diagram[i][j];

               if (curr_field->ctr == 1)
               {
#if DEBUG_COMPILE
                  if (DEBUG)     
                  {
                      cerr << "`curr_field->ctr' == 1.  Not calling `Field_Type::check'.  "
                           << "Continuing."
                           << endl;

                  }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 
                  continue;
               }

@q **** (4) @>
@
@<|main| definition@>=

               else
               {

      		   curr_field->show("*curr_field:");

                   status = curr_field->check(i, j);

                   cerr << endl;
     
      		   curr_field->show("*curr_field:");

#if 0 
		   cerr << "Enter <RETURN> to continue:  ";
      		   getchar();
      		   cerr << endl;
#endif 



               }  /* |else|  */

@q **** (4) @> 
@
@<|main| definition@>=


          }  /* |for|  */

#if DEBUG_COMPILE
          if (DEBUG)
          {
              cerr << endl;
          }
#endif  /* |DEBUG_COMPILE|  */ 

@q **** (4) @>

      }  /* |for|  */

@q *** (3) @>
@
@<|main| definition@>=

      unsigned int curr_bit = 1U;
      int ctr = 0;

      Field_Type *save_field = 0;


@q *** (3) @>
@
@<|main| definition@>=

      cerr << "Checking rows for single elements." << endl;

      curr_bit = 1U;
      ctr = 0;

      save_field = 0;

      for (int k = 1; k <= 9; ++k)
      {

          curr_bit <<= 1;

          cerr << "k == " << k << endl
               << "curr_bit == 0" << oct << curr_bit << " (octal)" << dec 
               << endl;

          for (int i = 0; i < 9; ++i)
          {

              ctr = 0;

              for (int j = 0; j < 9; ++j)
              {

                  cerr << "Checking [" << i << "][" << j << "]" << endl;

                  curr_field = &diagram[i][j];


                  curr_field->show("curr_field:");

                  if ((curr_field->bit_field & curr_bit) > 0 && curr_field->ctr == 1)
                  {
                      save_field = 0;
                      ctr = 2;
                      break;

                  }
                  else if ((curr_field->bit_field & curr_bit) > 0 && ctr == 0)
                  {
                     save_field = curr_field;
                     ++ctr;
                  }
                  else if ((curr_field->bit_field & curr_bit) > 0 && ctr == 1)
                  {
                     save_field = 0;
                     ++ctr;
                     break;
                  }

              }  /* |for|  */

              if (ctr == 1 && save_field != 0)
              {
                  cerr << "Found single element.  Setting."
                       << endl;

                  save_field->bit_field = curr_bit;
                  save_field->ctr       = 1;

                  ++Field_Type::set_field_ctr;
              }
            

          }  /* |for|  */

      }  /* |for|  */

@q **** (4) @>

      if (Field_Type::set_field_ctr >= 81)
      {
        cerr << "`Field_Type::set_field_ctr' == " << Field_Type::set_field_ctr << "(>= 81).  "
             << endl 
             << "Breaking." << endl;
        break;
      }

@q **** (4) @>

@q *** (3) @>
@
@<|main| definition@>=

      curr_bit = 1U;
      ctr = 0;

      save_field = 0;

      cerr << "Checking columns for single elements." << endl;       

      for (int k = 1; k <= 9; ++k)
      {

          curr_bit <<= 1;

          cerr << "k == " << k << endl
               << "curr_bit == 0" << oct << curr_bit << " (octal)" << dec 
               << endl;

          for (int j = 0; j < 9; ++j)
          {

              ctr = 0;

              for (int i = 0; i < 9; ++i)
              {

                  cerr << "Checking [" << i << "][" << j << "]" << endl;

                  curr_field = &diagram[i][j];


                  curr_field->show("curr_field:");

                  if ((curr_field->bit_field & curr_bit) > 0 && curr_field->ctr == 1)
                  {
                      save_field = 0;
                      ctr = 2;
                      break;

                  }
                  else if ((curr_field->bit_field & curr_bit) > 0 && ctr == 0)
                  {
                     save_field = curr_field;
                     ++ctr;
                  }
                  else if ((curr_field->bit_field & curr_bit) > 0 && ctr == 1)
                  {
                     save_field = 0;
                     ++ctr;
                     break;
                  }

              }  /* |for|  */

              if (ctr == 1 && save_field != 0)
              {
                  cerr << "Found single element.  Setting."
                       << endl;

                  save_field->bit_field = curr_bit;
                  save_field->ctr       = 1;

                  ++Field_Type::set_field_ctr;
              }
            

          }  /* |for|  */

      }  /* |for|  */

@q **** (4) @>

      if (Field_Type::set_field_ctr >= 81)
      {
        cerr << "`Field_Type::set_field_ctr' == " << Field_Type::set_field_ctr << "(>= 81).  "
             << endl 
             << "Breaking." << endl;
        break;
      }


@q *** (3) @>

@ Check inner squares for single elements.

@<|main| definition@>=
   
      curr_bit = 1U;
      ctr = 0;

      save_field = 0;

      cerr << "Checking inner squares for single elements." << endl;

      int m = 0;
      int n = 0;

@q *** (3) @>

      for (int k = 1; k <= 9; ++k)
      {
@q **** (4) @>

          curr_bit <<= 1;

          cerr << "k == " << k << endl
               << "curr_bit == 0" << oct << curr_bit << " (octal)" << dec 
               << endl;


@q **** (4) @>
@
@<|main| definition@>=

          for (int m = 0; m < 9; m += 3)
          {
@q ***** (5) @>

              for (int n = 0; n < 9; n += 3)
              {
@q ****** (6) @>

                  for (int i = m; i < m + 3; ++i)
                  {
@q ******* (7) @>

                     for (int j = n; j < n + 3; ++j)
                     {
@q ******** (8) @>

                        cerr << "Checking [" << i << "][" << j << "]" << endl;

                        curr_field = &diagram[i][j];


                        curr_field->show("curr_field:");

                        if ((curr_field->bit_field & curr_bit) > 0 && curr_field->ctr == 1)
                        {
                            cerr << "Already set.  Breaking." << endl;

                            save_field = 0;
                            ctr = 2;
                            break;

                        }
                        else if ((curr_field->bit_field & curr_bit) > 0 && ctr == 0)
                        {
                           save_field = curr_field;
                           ++ctr;
                        }
                        else if ((curr_field->bit_field & curr_bit) > 0 && ctr == 1)
                        {

                           cerr << "Not single.  Breaking." << endl;

                           save_field = 0;
                           ++ctr;
                           break;
                        }

@q ******** (8) @>

                     }  /* |for|  */

@q ******* (7) @>

                  }  /* |for|  */

@q ****** (6) @>
@
@<|main| definition@>=

                  cerr << endl;   

                  if (ctr == 1 && save_field != 0)
                  {
                      cerr << "Found single element.  Setting."
                           << endl;

                      save_field->bit_field = curr_bit;
                      save_field->ctr       = 1;

                      ++Field_Type::set_field_ctr;
                  }   

@q ****** (6) @>

              }  /* |for|  */

@q ***** (5) @>

          }  /* |for|  */

@q **** (4) @>

      }  /* |for|  */

@q **** (4) @>

@q *** (3) @>
@
@<|main| definition@>=
      

      if (Field_Type::set_field_ctr >= 81)
      {
        cerr << "`Field_Type::set_field_ctr' == " << Field_Type::set_field_ctr << "(>= 81).  "
             << endl 
             << "Breaking." << endl;
        break;
      }
      else if (iter_ctr > pass_limit)
      {
        cerr << "ERROR!  `iter_ctr' == " << iter_ctr << " (> " << pass_limit << ")."
             << endl
             << "Field_Type::set_field_ctr == " << Field_Type::set_field_ctr
             << endl 
             << "Failed to solve sudoku.  Breaking." 
             << endl;
        break;
      }
      else if (DEBUG)
      {
        cerr << "`Field_Type::set_field_ctr' == " << Field_Type::set_field_ctr << " (< 81)."
             << endl 
             << "Not Breaking." << endl;
      }

#if DEBUG_COMPILE
      if (DEBUG)
      {
           cerr << "End of pass " << iter_ctr 
                << endl
                << "Field_Type::set_field_ctr == " << Field_Type::set_field_ctr
                << endl;

  
           Field_Type::output(diagram);

           cerr << endl;



      }  /* |if (DEBUG)|  */
#endif  /* |DEBUG_COMPILE|  */ 


@q *** (3) @>

  }  /* |for|  */

@q ** (2) @>

  Field_Type::output(diagram);

  return 0;

}  /* End of |main| definition  */


@q * (1) @>
@
@c
@<Include files@>@;@/
using namespace std;
@<Global variable declarations@>@;@/
@<|main| definition@>@;@/


@q Local Variables: @>
@q mode:CWEB @>
@q abbrev-mode:t @>
@q eval:(outline-minor-mode t) @>
@q eval:(font-lock-mode nil) @>
@q End: @>

