!@c invoking.texi

@c This file is part of the 3DLDF User Manual.
@c Copyright (C) 2013 The Free Software Foundation
@c See the section "GNU Free Documentation License" in the file 
@c fdl.texi for copying conditions.

@node Invoking 3DLDF
@chapter Invoking 3DLDF

@node Options for single threaded multithreaded execution.
@subsection Options for single threaded multithreaded execution.

@samp{--multithread-input} 
@samp{--single-thread-input} 

@samp{--multithread-output}
@samp{--single-thread-output}

@samp{--multithread-include}
@samp{--single-thread-include}

Metafont and MetaPost both have only a single thread of execution.  
3DLDF can also be run using a single thread of execution, but 
it has options that allow it to be run with multiple 
threads of execution.

The defaults are multithreaded input and output 
and single-threaded inclusion (explained below).

When multithreaded input is enabled, filenames specified on the
command line are read in parallel in separate threads.  
@c !! Check this!
Unlike Metafont and MetaPost, 3DLDF can be called with multiple
filenames.  Whenever multithreaded input is enabled, multithreaded
output is also enabled.  If the options @samp{--multithreaded-input}
and @samp{--multithreaded-output} are passed to 3DLDF, a warning is
issued@c
@c
@footnote{Unless warning messages have been disabled by the 
@samp{--no-warnings} option.
@xref{Options for Screen Output}}
@c
and multithreaded output is enabled. 

For example, the invocation @samp{3dldf a.ldf b.ldf c.ldf} will cause
3DLDF to read @file{a.ldf}, @file{b.ldf}, and @file{c.ldf}, and write 
@file{a.mp}, @file{b.mp}, and @file{c.mp}.  If multithreaded output
was disabled while multithreaded input was enabled, then only
@file{a.mp} would be written, so the threads 
parsing @file{b.ldf} and @file{c.ldf} would be blocked until the
thread parsing @file{a.ldf} was finished.  Otherwise, the output from
the three threads would be intermixed in @file{a.mp}.    

If single-threaded input is enabled, @file{a.ldf}, @file{b.ldf}, and
@file{c.ldf} are read sequentially, and only @file{a.mp} is written,
but multithreaded output may still be enabled.  This way, 
3DLDF can still make progress with other tasks while writing to the
output file.  Of course, with only a single output file, it is more
likely that threads writing to it will block.

Users should be aware that the number of filename arguments and the
use of single-threading or multithreading have other consequences for
the behavior of 3DLDF.  
Therefore, it's a good idea to decide beforehand how one wants to
process one's input files.

For example, if @file{a.ldf} and @file{b.ldf}
are the filename arguments, single-threaded input is enabled, and
@file{a.ldf} contains an @samp{end} command, then 3DLDF exits without
ever processing @file{b.ldf}.  On the other hand, if multithreading is
enabled, both files are processed, and @file{a.mp} and @file{b.mp} are
written, whether @file{a.ldf} contains an @samp{end} command or not.

On the other hand, if single-threaded input is enabled, and @file{a.ldf}
doesn't contain an @samp{end} command, 
@file{b.ldf} will be read, and variables declared and values
set in @file{a.ldf} will be available in @file{b.ldf}, unless they
hidden by means of grouping.  
@xref{Grouping}.
When multithreaded-input is enabled, the variables and values set in
the files specified by filename arguments are completely separate.

When multiple filename arguments are used, and multithreaded input is
enabled, the end of an input file is treated as equivalent to an
@samp{end} command.  However, when single-threaded input is enabled
and none of the input files contains an @samp{end} command,
or when only a single filename argument is specified, and the file
doesn't contain an @samp{end} command, the user is prompted for
input after the last (or only) file has been read.  

If multithreaded inclusion is disabled (the default), and an 
@samp{include} <@i{filename}> command occurs in an input file, 3DLDF
proceeds to read the included file without spawning a new thread.
For example, if @file{a.ldf} contains the command 
@samp{include c.ldf}, it is as if the text of @file{c.ldf} was
inserted into @file{a.ldf} at that point.  

If multithreaded inclusion is enabled, however, the variables and
values available to @file{a.ldf} are copied, a new thread is
spawned to parse @file{c.ldf}, and the output produced from the
commands in @file{c.ldf} are written to @file{c.mp}.  The variables
available in @file{a.ldf} and @file{c.ldf} are the same when the new
thread is spawned, but they can diverge as the two threads go their
separate ways.  For example, if @file{a.ldf} contains this code:

@example
point p[];
picture q;

p0 := (1, 2, 3);

drawdot p0 on_picture q;

include "c.ldf";

drawdot p1 on_picture q;

@end example

@noindent
and @file{c.ldf} contains begins with this code:

@example
point r;
r := (3, 4, 5.5);
drawdot r on_picture q;
@end example

@noindent
@samp{picture q} in @file{a.ldf} and @samp{picture q} in @file{c.ldf}
are completely separate.  Both have the dot at @samp{p0}, but only the
@samp{picture q} in @file{a.ldf} has the dot at @file{p1} and only the 
@samp{picture q} in @file{c.ldf} has the dot at @samp{r}.  In
addition, @samp{p1} is an unknown @samp{point} in @file{c.ldf} and
@samp{r} is undeclared in @file{a.ldf}.

If multithreaded inclusion is enabled and multithreaded output is
disabled, a warning is issued@c
@c
@footnote{Again, unless warning messages have been disabled by the 
@samp{--no-warnings} option.
@xref{Options for Screen Output}}
@c
and multithreaded output is enabled.
@c 
@c !! Make sure I do this!

A further consequence of enabling multithreaded inclusion is that the
same file cannot be included more than once, because the output file
would be overwritten.  This is possible when single-threaded inclusion
is enabled, and is a technique familiar from Metafont.  For example,
a file can be included multiple times, with a set of parameters set to
different values each time.

Whenever multithreaded output is enabled,
the filenames passed as arguments to 3DLDF are checked, so that no two
output files have the same name.  For example, when only single-threading is used,
@file{a.ldf} and @file{a.xxx} are valid filename arguments, since
all output will be written to a single @file{a.mp} anyway.  When
multithreaded-output is enabled, this wouldn't work, since
otherwise the output produced from @file{a.ldf} and @file{a.xxx} would
all go to the same file and in an unpredictable order.
When multithreaded inclusion is specified, the filename arguments of
@samp{include} commands in input files are also checked, 
for the same reason.

